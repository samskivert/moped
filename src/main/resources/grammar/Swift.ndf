name: Swift
scopeName: source.swift
repository:
 async-throws:
  single:
   pattern: \b(?:(throws\s+async|rethrows\s+async)|(throws|rethrows)|(async))\b
   caps: 1=invalid.illegal.await-must-precede-throws.swift 2=storage.modifier.exception.swift 3=storage.modifier.async.swift
 attributes:
  multi:
   name: meta.attribute.available.swift
   begin: ((@)available)(\()
   bcaps: 1=storage.modifier.attribute.swift 2=punctuation.definition.attribute.swift 3=punctuation.definition.arguments.begin.swift
   end: \)
   ecaps: 0=punctuation.definition.arguments.end.swift
   patterns:
    single:
     pattern: \b(swift|(?:iOS|macOS|OSX|watchOS|tvOS|UIKitForMac)(?:ApplicationExtension)?)\b(?:\s+([0-9]+(?:\.[0-9]+)*\b))?
     caps: 1=keyword.other.platform.os.swift 2=constant.numeric.swift
    multi:
     begin: \b(introduced|deprecated|obsoleted)\s*(:)\s*
     bcaps: 1=keyword.other.swift 2=punctuation.separator.key-value.swift
     end: (?!\G)
     patterns:
      single:
       name: constant.numeric.swift
       pattern: \b[0-9]+(?:\.[0-9]+)*\b
    multi:
     begin: \b(message|renamed)\s*(:)\s*(?=")
     bcaps: 1=keyword.other.swift 2=punctuation.separator.key-value.swift
     end: (?!\G)
     patterns:
      include: #literals
    single:
     pattern: (?:(\*)|\b(deprecated|unavailable|noasync)\b)\s*(.*?)(?=[,)])
     caps: 1=keyword.other.platform.all.swift 2=keyword.other.swift 3=invalid.illegal.character-not-allowed-here.swift
  multi:
   name: meta.attribute.objc.swift
   begin: ((@)objc)(\()
   bcaps: 1=storage.modifier.attribute.swift 2=punctuation.definition.attribute.swift 3=punctuation.definition.arguments.begin.swift
   end: \)
   ecaps: 0=punctuation.definition.arguments.end.swift
   patterns:
    single:
     name: entity.name.function.swift
     pattern: \w*(?::(?:\w*:)*(\w*))?
     caps: 1=invalid.illegal.missing-colon-after-selector-piece.swift
  multi:
   name: meta.attribute.swift
   begin: (@)(?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>)
   bcaps: 0=storage.modifier.attribute.swift 1=punctuation.definition.attribute.swift 2=punctuation.definition.identifier.swift 3=punctuation.definition.identifier.swift
   end: (?!\G\()
   patterns:
    multi:
     name: meta.arguments.attribute.swift
     begin: \(
     bcaps: 0=punctuation.definition.arguments.begin.swift
     end: \)
     ecaps: 0=punctuation.definition.arguments.end.swift
     patterns:
      include: #expressions
 builtin-functions:
  single:
   name: support.function.swift
   pattern: (?<=\.)(?:s(?:ort(?:ed)?|plit)|contains|index|partition|f(?:i(?:lter|rst)|orEach|latMap)|with(?:MutableCharacters|CString|U(?:nsafe(?:Mutable(?:BufferPointer|Pointer(?:s|To(?:Header|Elements)))|BufferPointer)|TF8Buffer))|m(?:in|a(?:p|x)))(?=\s*[({])\b
  single:
   name: support.function.swift
   pattern: (?<=\.)(?:s(?:ymmetricDifference|t(?:oreBytes|arts|ride)|ortInPlace|u(?:ccessor|ffix|btract(?:ing|InPlace|WithOverflow)?)|quareRoot|amePosition)|h(?:oldsUnique(?:Reference|OrPinnedReference)|as(?:Suffix|Prefix))|ne(?:gate(?:d)?|xt)|c(?:o(?:untByEnumerating|py(?:Bytes)?)|lamp(?:ed)?|reate)|t(?:o(?:IntMax|Opaque|UIntMax)|ake(?:RetainedValue|UnretainedValue)|r(?:uncatingRemainder|a(?:nscodedLength|ilSurrogate)))|i(?:s(?:MutableAndUniquelyReferenced(?:OrPinned)?|S(?:trictSu(?:perset(?:Of)?|bset(?:Of)?)|u(?:perset(?:Of)?|bset(?:Of)?))|Continuation|T(?:otallyOrdered|railSurrogate)|Disjoint(?:With)?|Unique(?:Reference|lyReferenced(?:OrPinned)?)|Equal|Le(?:ss(?:ThanOrEqualTo)?|adSurrogate))|n(?:sert(?:ContentsOf)?|tersect(?:ion|InPlace)?|itialize(?:Memory|From)?|dex(?:Of|ForKey)))|o(?:verlaps|bjectAt)|d(?:i(?:stance(?:To)?|vide(?:d|WithOverflow)?)|e(?:s(?:cendant|troy)|code(?:CString)?|initialize|alloc(?:ate(?:Capacity)?)?)|rop(?:First|Last))|u(?:n(?:ion(?:InPlace)?|derestimateCount|wrappedOrError)|p(?:date(?:Value)?|percased))|join(?:ed|WithSeparator)|p(?:op(?:First|Last)|ass(?:Retained|Unretained)|re(?:decessor|fix))|e(?:scape(?:d)?|n(?:code|umerate(?:d)?)|lementsEqual|xclusiveOr(?:InPlace)?)|f(?:orm(?:Remainder|S(?:ymmetricDifference|quareRoot)|TruncatingRemainder|In(?:tersection|dex)|Union)|latten|rom(?:CString(?:RepairingIllFormedUTF8)?|Opaque))|w(?:i(?:thMemoryRebound|dth)|rite(?:To)?)|l(?:o(?:wercased|ad)|e(?:adSurrogate|xicographical(?:Compare|lyPrecedes)))|a(?:ss(?:ign(?:BackwardFrom|From)?|umingMemoryBound)|d(?:d(?:ing(?:Product)?|Product|WithOverflow)?|vanced(?:By)?)|utorelease|ppend(?:ContentsOf)?|lloc(?:ate)?|bs)|r(?:ound(?:ed)?|e(?:serveCapacity|tain|duce|place(?:Range|Subrange)?|verse(?:d)?|quest(?:NativeBuffer|UniqueMutableBackingBuffer)|lease|m(?:ove(?:Range|Subrange|Value(?:ForKey)?|First|Last|A(?:tIndex|ll))?|ainder(?:WithOverflow)?)))|ge(?:nerate|t(?:Objects|Element))|m(?:in(?:imum(?:Magnitude)?|Element)|ove(?:Initialize(?:Memory|BackwardFrom|From)?|Assign(?:From)?)?|ultipl(?:y(?:WithOverflow)?|ied)|easure|a(?:ke(?:Iterator|Description)|x(?:imum(?:Magnitude)?|Element)))|bindMemory)(?=\s*\()
  single:
   name: support.function.swift
   pattern: (?<=\.)(?:s(?:uperclassMirror|amePositionIn|tartsWith)|nextObject|c(?:haracterAtIndex|o(?:untByEnumeratingWithState|pyWithZone)|ustom(?:Mirror|PlaygroundQuickLook))|is(?:EmptyInput|ASCII)|object(?:Enumerator|ForKey|AtIndex)|join|put|keyEnumerator|withUnsafeMutablePointerToValue|length|getMirror|m(?:oveInitializeAssignFrom|ember))(?=\s*\()
 builtin-global-functions:
  multi:
   begin: \b(type)(\()\s*(of)(:)
   bcaps: 1=support.function.dynamic-type.swift 2=punctuation.definition.arguments.begin.swift 3=support.variable.parameter.swift 4=punctuation.separator.argument-label.begin.swift
   end: \)
   ecaps: 0=punctuation.definition.arguments.end.swift
   patterns:
    include: #expressions
  single:
   name: support.function.swift
   pattern: \b(?:anyGenerator|autoreleasepool)(?=\s*[({])\b
  single:
   name: support.function.swift
   pattern: \b(?:s(?:tride(?:of(?:Value)?)?|izeof(?:Value)?|equence|wap)|numericCast|transcode|is(?:UniquelyReferenced(?:NonObjC)?|KnownUniquelyReferenced)|zip|d(?:ump|ebugPrint)|unsafe(?:BitCast|Downcast|Unwrap|Address(?:Of)?)|pr(?:int|econdition(?:Failure)?)|fatalError|with(?:Unsafe(?:MutablePointer|Pointer)|ExtendedLifetime|VaList)|a(?:ssert(?:ionFailure)?|lignof(?:Value)?|bs)|re(?:peatElement|adLine)|getVaList|m(?:in|ax))(?=\s*\()
  single:
   name: support.function.swift
   pattern: \b(?:s(?:ort|uffix|pli(?:ce|t))|insert|overlaps|d(?:istance|rop(?:First|Last))|join|prefix|extend|withUnsafe(?:MutablePointers|Pointers)|lazy|advance|re(?:flect|move(?:Range|Last|A(?:tIndex|ll))))(?=\s*\()
 builtin-properties:
  single:
   name: support.variable.swift
   pattern: (?<=^Process\.|\WProcess\.|^CommandLine\.|\WCommandLine\.)(arguments|argc|unsafeArgv)
  single:
   name: support.variable.swift
   pattern: (?<=\.)(?:s(?:t(?:artIndex|ri(?:ngValue|de))|i(?:ze|gn(?:BitIndex|ificand(?:Bit(?:Count|Pattern)|Width)?|alingNaN)?)|u(?:perclassMirror|mmary|bscriptBaseAddress))|h(?:eader|as(?:hValue|PointerRepresentation))|n(?:ulTerminatedUTF8|ext(?:Down|Up)|a(?:n|tiveOwner))|c(?:haracters|ount(?:TrailingZeros)?|ustom(?:Mirror|PlaygroundQuickLook)|apacity)|i(?:s(?:S(?:ign(?:Minus|aling(?:NaN)?)|ubnormal)|N(?:ormal|aN)|Canonical|Infinite|Zero|Empty|Finite|ASCII)|n(?:dices|finity)|dentity)|owner|de(?:scription|bugDescription)|u(?:n(?:safelyUnwrapped|icodeScalar(?:s)?|derestimatedCount)|tf(?:16|8(?:Start|C(?:String|odeUnitCount))?)|intValue|ppercaseString|lp(?:OfOne)?)|p(?:i|ointee)|e(?:ndIndex|lements|xponent(?:Bit(?:Count|Pattern))?)|value(?:s)?|keys|quietNaN|f(?:irst(?:ElementAddress(?:IfContiguous)?)?|loatingPointClass)|l(?:ittleEndian|owercaseString|eastNo(?:nzeroMagnitude|rmalMagnitude)|a(?:st|zy))|a(?:l(?:ignment|l(?:ocatedElementCount|Zeros))|rray(?:PropertyIsNativeTypeChecked)?)|ra(?:dix|wValue)|greatestFiniteMagnitude|m(?:in|emory|ax)|b(?:yteS(?:ize|wapped)|i(?:nade|tPattern|gEndian)|uffer|ase(?:Address)?))\b
  single:
   name: support.variable.swift
   pattern: (?<=\.)(?:boolValue|disposition|end|objectIdentifier|quickLookObject|start|valueType)\b
  single:
   name: support.variable.swift
   pattern: (?<=\.)(?:s(?:calarValue|i(?:ze|gnalingNaN)|o(?:und|me)|uppressed|prite|et)|n(?:one|egative(?:Subnormal|Normal|Infinity|Zero))|c(?:ol(?:or|lection)|ustomized)|t(?:o(?:NearestOr(?:Even|AwayFromZero)|wardZero)|uple|ext)|i(?:nt|mage)|optional|d(?:ictionary|o(?:uble|wn))|u(?:Int|p|rl)|p(?:o(?:sitive(?:Subnormal|Normal|Infinity|Zero)|int)|lus)|e(?:rror|mptyInput)|view|quietNaN|float|a(?:ttributedString|wayFromZero)|r(?:ectangle|ange)|generated|minus|b(?:ool|ezierPath))\b
 builtin-types:
  include: #builtin-types-builtin-class-type
  include: #builtin-types-builtin-enum-type
  include: #builtin-types-builtin-protocol-type
  include: #builtin-types-builtin-struct-type
  include: #builtin-types-builtin-typealias
  single:
   name: support.type.any.swift
   pattern: \bAny\b
 builtin-types-builtin-class-type:
  single:
   name: support.class.swift
   pattern: \b(Managed(Buffer|ProtoBuffer)|NonObjectiveCBase|AnyGenerator)\b
 builtin-types-builtin-enum-type:
  single:
   name: support.constant.swift
   pattern: \b(?:CommandLine|Process(?=\.))\b
  single:
   name: support.constant.never.swift
   pattern: \bNever\b
  single:
   name: support.type.swift
   pattern: \b(?:ImplicitlyUnwrappedOptional|Representation|MemoryLayout|FloatingPointClassification|SetIndexRepresentation|SetIteratorRepresentation|FloatingPointRoundingRule|UnicodeDecodingResult|Optional|DictionaryIndexRepresentation|AncestorRepresentation|DisplayStyle|PlaygroundQuickLook|Never|FloatingPointSign|Bit|DictionaryIteratorRepresentation)\b
  single:
   name: support.type.swift
   pattern: \b(?:MirrorDisposition|QuickLookObject)\b
 builtin-types-builtin-protocol-type:
  single:
   name: support.type.swift
   pattern: \b(?:Ra(?:n(?:domAccess(?:Collection|Indexable)|geReplaceable(?:Collection|Indexable))|wRepresentable)|M(?:irrorPath|utable(?:Collection|Indexable))|Bi(?:naryFloatingPoint|twiseOperations|directional(?:Collection|Indexable))|S(?:tr(?:ideable|eamable)|igned(?:Number|Integer)|e(?:tAlgebra|quence))|Hashable|C(?:o(?:llection|mparable)|ustom(?:Reflectable|StringConvertible|DebugStringConvertible|PlaygroundQuickLookable|LeafReflectable)|VarArg)|TextOutputStream|I(?:n(?:teger(?:Arithmetic)?|dexable(?:Base)?)|teratorProtocol)|OptionSet|Un(?:signedInteger|icodeCodec)|E(?:quatable|rror|xpressibleBy(?:BooleanLiteral|String(?:Interpolation|Literal)|NilLiteral|IntegerLiteral|DictionaryLiteral|UnicodeScalarLiteral|ExtendedGraphemeClusterLiteral|FloatLiteral|ArrayLiteral))|FloatingPoint|L(?:osslessStringConvertible|azy(?:SequenceProtocol|CollectionProtocol))|A(?:nyObject|bsoluteValuable))\b
  single:
   name: support.type.swift
   pattern: \b(?:Ran(?:domAccessIndexType|geReplaceableCollectionType)|GeneratorType|M(?:irror(?:Type|PathType)|utable(?:Sliceable|CollectionType))|B(?:i(?:twiseOperationsType|directionalIndexType)|oolean(?:Type|LiteralConvertible))|S(?:tring(?:InterpolationConvertible|LiteralConvertible)|i(?:nkType|gned(?:NumberType|IntegerType))|e(?:tAlgebraType|quenceType)|liceable)|NilLiteralConvertible|C(?:ollectionType|VarArgType)|Inte(?:rvalType|ger(?:Type|LiteralConvertible|ArithmeticType))|O(?:utputStreamType|ptionSetType)|DictionaryLiteralConvertible|Un(?:signedIntegerType|icode(?:ScalarLiteralConvertible|CodecType))|E(?:rrorType|xten(?:sibleCollectionType|dedGraphemeClusterLiteralConvertible))|F(?:orwardIndexType|loat(?:ingPointType|LiteralConvertible))|A(?:nyCollectionType|rrayLiteralConvertible))\b
 builtin-types-builtin-struct-type:
  single:
   name: support.type.swift
   pattern: \b(?:R(?:e(?:peat(?:ed)?|versed(?:RandomAccess(?:Collection|Index)|Collection|Index))|an(?:domAccessSlice|ge(?:Replaceable(?:RandomAccessSlice|BidirectionalSlice|Slice)|Generator)?))|Generator(?:Sequence|OfOne)|M(?:irror|utable(?:Ran(?:domAccessSlice|geReplaceable(?:RandomAccessSlice|BidirectionalSlice|Slice))|BidirectionalSlice|Slice)|anagedBufferPointer)|B(?:idirectionalSlice|ool)|S(?:t(?:aticString|ri(?:ng|deT(?:hrough(?:Generator|Iterator)?|o(?:Generator|Iterator)?)))|et(?:I(?:ndex|terator))?|lice)|HalfOpenInterval|C(?:haracter(?:View)?|o(?:ntiguousArray|untable(?:Range|ClosedRange)|llectionOfOne)|OpaquePointer|losed(?:Range(?:I(?:ndex|terator))?|Interval)|VaListPointer)|I(?:n(?:t(?:16|8|32|64)?|d(?:ices|ex(?:ing(?:Generator|Iterator))?))|terator(?:Sequence|OverOne)?)|Zip2(?:Sequence|Iterator)|O(?:paquePointer|bjectIdentifier)|D(?:ictionary(?:I(?:ndex|terator)|Literal)?|ouble|efault(?:RandomAccessIndices|BidirectionalIndices|Indices))|U(?:n(?:safe(?:RawPointer|Mutable(?:RawPointer|BufferPointer|Pointer)|BufferPointer(?:Generator|Iterator)?|Pointer)|icodeScalar(?:View)?|foldSequence|managed)|TF(?:16(?:View)?|8(?:View)?|32)|Int(?:16|8|32|64)?)|Join(?:Generator|ed(?:Sequence|Iterator))|PermutationGenerator|E(?:numerate(?:Generator|Sequence|d(?:Sequence|Iterator))|mpty(?:Generator|Collection|Iterator))|Fl(?:oat(?:80)?|atten(?:Generator|BidirectionalCollection(?:Index)?|Sequence|Collection(?:Index)?|Iterator))|L(?:egacyChildren|azy(?:RandomAccessCollection|Map(?:RandomAccessCollection|Generator|BidirectionalCollection|Sequence|Collection|Iterator)|BidirectionalCollection|Sequence|Collection|Filter(?:Generator|BidirectionalCollection|Sequence|Collection|I(?:ndex|terator))))|A(?:ny(?:RandomAccessCollection|Generator|BidirectionalCollection|Sequence|Hashable|Collection|I(?:ndex|terator))|utoreleasingUnsafeMutablePointer|rray(?:Slice)?))\b
  single:
   name: support.type.swift
   pattern: \b(?:R(?:everse(?:RandomAccess(?:Collection|Index)|Collection|Index)|awByte)|Map(?:Generator|Sequence|Collection)|S(?:inkOf|etGenerator)|Zip2Generator|DictionaryGenerator|Filter(?:Generator|Sequence|Collection(?:Index)?)|LazyForwardCollection|Any(?:RandomAccessIndex|BidirectionalIndex|Forward(?:Collection|Index)))\b
 builtin-types-builtin-typealias:
  single:
   name: support.type.swift
   pattern: \b(?:Raw(?:Significand|Exponent|Value)|B(?:ooleanLiteralType|uffer|ase)|S(?:t(?:orage|r(?:i(?:ngLiteralType|de)|eam(?:1|2)))|ubSequence)|NativeBuffer|C(?:hild(?:ren)?|Bool|S(?:hort|ignedChar)|odeUnit|Char(?:16|32)?|Int|Double|Unsigned(?:Short|Char|Int|Long(?:Long)?)|Float|WideChar|Long(?:Long)?)|I(?:n(?:t(?:Max|egerLiteralType)|d(?:ices|ex(?:Distance)?))|terator)|Distance|U(?:n(?:icodeScalar(?:Type|Index|View|LiteralType)|foldFirstSequence)|TF(?:16(?:Index|View)|8Index)|IntMax)|E(?:lement(?:s)?|x(?:tendedGraphemeCluster(?:Type|LiteralType)|ponent))|V(?:oid|alue)|Key|Float(?:32|LiteralType|64)|AnyClass)\b
  single:
   name: support.type.swift
   pattern: \b(?:Generator|PlaygroundQuickLook|UWord|Word)\b
 code-block:
  multi:
   begin: \{
   bcaps: 0=punctuation.section.scope.begin.swift
   end: \}
   ecaps: 0=punctuation.section.scope.end.swift
   patterns:
    include: $self
 comments:
  single:
   name: comment.line.number-sign.swift
   pattern: \A^(#!).*$\n?
   caps: 1=punctuation.definition.comment.swift
  multi:
   name: comment.block.documentation.swift
   begin: /\*\*(?!/)
   bcaps: 0=punctuation.definition.comment.begin.swift
   end: \*/
   ecaps: 0=punctuation.definition.comment.end.swift
   patterns:
    include: #comments-nested
  multi:
   name: comment.block.documentation.playground.swift
   begin: /\*:
   bcaps: 0=punctuation.definition.comment.begin.swift
   end: \*/
   ecaps: 0=punctuation.definition.comment.end.swift
   patterns:
    include: #comments-nested
  multi:
   name: comment.block.swift
   begin: /\*
   bcaps: 0=punctuation.definition.comment.begin.swift
   end: \*/
   ecaps: 0=punctuation.definition.comment.end.swift
   patterns:
    include: #comments-nested
  single:
   name: invalid.illegal.unexpected-end-of-block-comment.swift
   pattern: \*/
  multi:
   begin: (^[ \t]+)?(?=//)
   bcaps: 1=punctuation.whitespace.comment.leading.swift
   end: (?!\G)
   patterns:
    multi:
     name: comment.line.triple-slash.documentation.swift
     begin: ///
     bcaps: 0=punctuation.definition.comment.swift
     end: $
    multi:
     name: comment.line.double-slash.documentation.swift
     begin: //:
     bcaps: 0=punctuation.definition.comment.swift
     end: $
    multi:
     name: comment.line.double-slash.swift
     begin: //
     bcaps: 0=punctuation.definition.comment.swift
     end: $
 comments-nested:
  multi:
   begin: /\*
   end: \*/
   patterns:
    include: #comments-nested
 compiler-control:
  multi:
   contentName: comment.block.preprocessor.swift
   begin: ^\s*(#)(if|elseif)\s+(false)\b.*?(?=$|//|/\*)
   bcaps: 0=meta.preprocessor.conditional.swift 1=punctuation.definition.preprocessor.swift 2=keyword.control.import.preprocessor.conditional.swift 3=constant.language.boolean.swift
   end: (?=^\s*(#(elseif|else|endif)\b))
  multi:
   name: meta.preprocessor.conditional.swift
   begin: ^\s*(#)(if|elseif)\s+
   bcaps: 1=punctuation.definition.preprocessor.swift 2=keyword.control.import.preprocessor.conditional.swift
   end: (?=\s*(?://|/\*))|$
   ecaps: 1=punctuation.definition.preprocessor.swift 2=keyword.control.import.preprocessor.conditional.swift
   patterns:
    single:
     name: keyword.operator.logical.swift
     pattern: (&&|\|\|)
    single:
     name: constant.language.boolean.swift
     pattern: \b(true|false)\b
    single:
     pattern: \b(arch)\s*(\()\s*(?:(arm|arm64|powerpc64|powerpc64le|i386|x86_64|s390x)|\w+)\s*(\))
     caps: 1=keyword.other.condition.swift 2=punctuation.definition.parameters.begin.swift 3=support.constant.platform.architecture.swift 4=punctuation.definition.parameters.end.swift
    single:
     pattern: \b(os)\s*(\()\s*(?:(macOS|OSX|iOS|tvOS|watchOS|Android|Linux|FreeBSD|Windows|PS4)|\w+)\s*(\))
     caps: 1=keyword.other.condition.swift 2=punctuation.definition.parameters.begin.swift 3=support.constant.platform.os.swift 4=punctuation.definition.parameters.end.swift
    single:
     pattern: \b(canImport)\s*(\()([\p{L}_][\p{L}_\p{N}\p{M}]*)(\))
     caps: 1=keyword.other.condition.swift 2=punctuation.definition.parameters.begin.swift 3=entity.name.type.module.swift 4=punctuation.definition.parameters.end.swift
    multi:
     begin: \b(targetEnvironment)\s*(\()
     bcaps: 1=keyword.other.condition.swift 2=punctuation.definition.parameters.begin.swift
     end: (\))|$
     ecaps: 1=punctuation.definition.parameters.end.swift
     patterns:
      single:
       name: support.constant.platform.environment.swift
       pattern: \b(simulator|UIKitForMac)\b
    multi:
     begin: \b(swift|compiler)\s*(\()
     bcaps: 1=keyword.other.condition.swift 2=punctuation.definition.parameters.begin.swift
     end: (\))|$
     ecaps: 1=punctuation.definition.parameters.end.swift
     patterns:
      single:
       name: keyword.operator.comparison.swift
       pattern: >=|<
      single:
       name: constant.numeric.swift
       pattern: \b[0-9]+(?:\.[0-9]+)*\b
  single:
   name: meta.preprocessor.conditional.swift
   pattern: ^\s*(#)(else|endif)(.*?)(?=$|//|/\*)
   caps: 1=punctuation.definition.preprocessor.swift 2=keyword.control.import.preprocessor.conditional.swift
  single:
   name: meta.preprocessor.sourcelocation.swift
   pattern: ^\s*(#)(sourceLocation)((\()([^)]*)(\)))(.*?)(?=$|//|/\*)
   caps: 1=punctuation.definition.preprocessor.swift 2=keyword.control.import.preprocessor.sourcelocation.swift 4=punctuation.definition.parameters.begin.swift 6=punctuation.definition.parameters.begin.swift
 conditionals:
  multi:
   begin: (?<!\.)\b(if|guard|switch|for)\b
   end: (?=\{)
   patterns:
    include: #expressions-without-trailing-closures
  multi:
   begin: (?<!\.)\b(while)\b
   end: (?=\{)|$
   patterns:
    include: #expressions-without-trailing-closures
 declarations:
  include: #declarations-function
  include: #declarations-function-initializer
  include: #declarations-function-subscript
  include: #declarations-typed-variable-declaration
  include: #declarations-import
  include: #declarations-operator
  include: #declarations-precedencegroup
  include: #declarations-protocol
  include: #declarations-type
  include: #declarations-extension
  include: #declarations-typealias
  include: #declarations-macro
 declarations-available-types:
  include: #comments
  include: #builtin-types
  include: #attributes
  single:
   name: storage.modifier.async.swift
   pattern: \basync\b
  single:
   name: storage.modifier.exception.swift
   pattern: \b(?:throws|rethrows)\b
  single:
   name: keyword.other.operator.type.opaque.swift
   pattern: \bsome\b
  single:
   name: keyword.other.operator.type.existential.swift
   pattern: \bany\b
  single:
   name: keyword.control.loop.swift
   pattern: \b(?:repeat|each)\b
  single:
   name: storage.modifier.swift
   pattern: \b(?:inout|isolated|borrowing|consuming)\b
  single:
   name: variable.language.swift
   pattern: \bSelf\b
  single:
   pattern: (?<![/=\-+!*%<>&|\^~.])(->)(?![/=\-+!*%<>&|\^~.])
   caps: 1=keyword.operator.type.function.swift
  single:
   pattern: (?<![/=\-+!*%<>&|\^~.])(&)(?![/=\-+!*%<>&|\^~.])
   caps: 1=keyword.operator.type.composition.swift
  single:
   name: keyword.operator.type.optional.swift
   pattern: [?!]
  single:
   name: keyword.operator.function.variadic-parameter.swift
   pattern: \.\.\.
  single:
   name: keyword.other.type.composition.swift
   pattern: \bprotocol\b
  single:
   name: keyword.other.type.metatype.swift
   pattern: (?<=\.)(?:Protocol|Type)\b
  include: #declarations-available-types-tuple-type
  include: #declarations-available-types-collection-type
  include: #declarations-generic-argument-clause
 declarations-available-types-collection-type:
  multi:
   begin: \[
   bcaps: 0=punctuation.section.collection-type.begin.swift
   end: \]|(?=[>){}])
   ecaps: 0=punctuation.section.collection-type.end.swift
   patterns:
    include: #declarations-available-types
    multi:
     begin: :
     bcaps: 0=punctuation.separator.key-value.swift
     end: (?=\]|[>){}])
     patterns:
      single:
       name: invalid.illegal.extra-colon-in-dictionary-type.swift
       pattern: :
      include: #declarations-available-types
 declarations-available-types-tuple-type:
  multi:
   begin: \(
   bcaps: 0=punctuation.section.tuple-type.begin.swift
   end: \)|(?=[>\]{}])
   ecaps: 0=punctuation.section.tuple-type.end.swift
   patterns:
    include: #declarations-available-types
 declarations-extension:
  multi:
   name: meta.definition.type.$1.swift
   begin: \b(extension)\s+((?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>))
   bcaps: 1=storage.type.$1.swift 2=entity.name.type.swift 3=punctuation.definition.identifier.swift 4=punctuation.definition.identifier.swift
   end: (?<=\})
   patterns:
    include: #comments
    include: #declarations-generic-where-clause
    include: #declarations-inheritance-clause
    multi:
     name: meta.definition.type.body.swift
     begin: \{
     bcaps: 0=punctuation.definition.type.begin.swift
     end: \}
     ecaps: 0=punctuation.definition.type.end.swift
     patterns:
      include: $self
 declarations-function:
  multi:
   name: meta.definition.function.swift
   begin: (?x)\
\b\
(func)\
\s+\
(\
  (?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>)\
  | (?:\
    (\
      (?<oph>                # operator-head\
        [/=\-+!*%<>&|^~?]\
        | [\x{00A1}-\x{00A7}]\
        | [\x{00A9}\x{00AB}]\
        | [\x{00AC}\x{00AE}]\
        | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]\
        | [\x{2016}-\x{2017}\x{2020}-\x{2027}]\
        | [\x{2030}-\x{203E}]\
        | [\x{2041}-\x{2053}]\
        | [\x{2055}-\x{205E}]\
        | [\x{2190}-\x{23FF}]\
        | [\x{2500}-\x{2775}]\
        | [\x{2794}-\x{2BFF}]\
        | [\x{2E00}-\x{2E7F}]\
        | [\x{3001}-\x{3003}]\
        | [\x{3008}-\x{3030}]\
      )*\
    )\
  )\
)\
\s*\
(?=\(|<)
   bcaps: 1=storage.type.function.swift 2=entity.name.function.swift 3=punctuation.definition.identifier.swift 4=punctuation.definition.identifier.swift
   end: (?<=\})|$
   patterns:
    include: #comments
    include: #declarations-generic-parameter-clause
    include: #declarations-parameter-clause
    include: #declarations-function-result
    include: #async-throws
    include: #declarations-generic-where-clause
    multi:
     name: meta.definition.function.body.swift
     begin: (\{)
     bcaps: 1=punctuation.section.function.begin.swift
     end: (\})
     ecaps: 1=punctuation.section.function.end.swift
     patterns:
      include: $self
 declarations-function-initializer:
  multi:
   name: meta.definition.function.initializer.swift
   begin: (?<!\.)\b(init[?!]*)\s*(?=\(|<)
   bcaps: 1=storage.type.function.swift
   end: (?<=\})|$
   patterns:
    include: #comments
    include: #declarations-generic-parameter-clause
    include: #declarations-parameter-clause
    include: #async-throws
    include: #declarations-generic-where-clause
    multi:
     name: meta.definition.function.body.swift
     begin: (\{)
     bcaps: 1=punctuation.section.function.begin.swift
     end: (\})
     ecaps: 1=punctuation.section.function.end.swift
     patterns:
      include: $self
 declarations-function-result:
  multi:
   name: meta.function-result.swift
   begin: (?<![/=\-+!*%<>&|\^~.])(->)(?![/=\-+!*%<>&|\^~.])\s*
   bcaps: 1=keyword.operator.function-result.swift
   end: (?!\G)(?=\{|\bwhere\b|;|=)|$
   patterns:
    include: #declarations-available-types
 declarations-function-subscript:
  multi:
   name: meta.definition.function.subscript.swift
   begin: (?<!\.)\b(subscript)\s*(?=\(|<)
   bcaps: 1=storage.type.function.swift
   end: (?<=\})|$
   patterns:
    include: #comments
    include: #declarations-generic-parameter-clause
    include: #declarations-parameter-clause
    include: #declarations-function-result
    include: #async-throws
    include: #declarations-generic-where-clause
    multi:
     name: meta.definition.function.body.swift
     begin: (\{)
     bcaps: 1=punctuation.section.function.begin.swift
     end: (\})
     ecaps: 1=punctuation.section.function.end.swift
     patterns:
      include: $self
 declarations-generic-argument-clause:
  multi:
   name: meta.generic-argument-clause.swift
   begin: <
   bcaps: 0=punctuation.separator.generic-argument-clause.begin.swift
   end: >|(?=[)\]{}])
   ecaps: 0=punctuation.separator.generic-argument-clause.end.swift
   patterns:
    include: #declarations-available-types
 declarations-generic-parameter-clause:
  multi:
   name: meta.generic-parameter-clause.swift
   begin: <
   bcaps: 0=punctuation.separator.generic-parameter-clause.begin.swift
   end: >|(?=[^\w\d:<>\s,=&`])
   ecaps: 0=punctuation.separator.generic-parameter-clause.end.swift
   patterns:
    include: #comments
    include: #declarations-generic-where-clause
    single:
     name: keyword.control.loop.swift
     pattern: \beach\b
    single:
     pattern: \b((?!\d)\w[\w\d]*)\b
     caps: 1=variable.language.generic-parameter.swift
    single:
     name: punctuation.separator.generic-parameters.swift
     pattern: ,
    multi:
     name: meta.generic-parameter-constraint.swift
     begin: (:)\s*
     bcaps: 1=punctuation.separator.generic-parameter-constraint.swift
     end: (?=[,>]|(?!\G)\bwhere\b)
     patterns:
      multi:
       name: entity.other.inherited-class.swift
       begin: \G
       end: (?=[,>]|(?!\G)\bwhere\b)
       patterns:
        include: #declarations-type-identifier
        include: #declarations-type-operators
 declarations-generic-where-clause:
  multi:
   name: meta.generic-where-clause.swift
   begin: \b(where)\b\s*
   bcaps: 1=keyword.other.generic-constraint-introducer.swift
   end: (?!\G)$|(?=[>{};\n]|//|/\*)
   patterns:
    include: #comments
    include: #declarations-generic-where-clause-requirement-list
 declarations-generic-where-clause-requirement-list:
  multi:
   begin: \G|,\s*
   end: (?=[,>{};\n]|//|/\*)
   patterns:
    include: #comments
    include: #constraint
    include: #declarations-available-types
    multi:
     name: meta.generic-where-clause.same-type-requirement.swift
     begin: (?<![/=\-+!*%<>&|\^~.])(==)(?![/=\-+!*%<>&|\^~.])
     bcaps: 1=keyword.operator.generic-constraint.same-type.swift
     end: (?=\s*[,>{};\n]|//|/\*)
     patterns:
      include: #declarations-available-types
    multi:
     name: meta.generic-where-clause.conformance-requirement.swift
     begin: (?<![/=\-+!*%<>&|\^~.])(:)(?![/=\-+!*%<>&|\^~.])
     bcaps: 1=keyword.operator.generic-constraint.conforms-to.swift
     end: (?=\s*[,>{};\n]|//|/\*)
     patterns:
      multi:
       contentName: entity.other.inherited-class.swift
       begin: \G\s*
       end: (?=\s*[,>{};\n]|//|/\*)
       patterns:
        include: #declarations-available-types
 declarations-import:
  multi:
   name: meta.import.swift
   begin: (?<!\.)\b(import)\s+
   bcaps: 1=keyword.control.import.swift
   end: (;)|$\n?|(?=//|/\*)
   ecaps: 1=punctuation.terminator.statement.swift
   patterns:
    multi:
     begin: \G(?!;|$|//|/\*)(?:(typealias|struct|class|actor|enum|protocol|var|func)\s+)?
     bcaps: 1=storage.modifier.swift
     end: (?=;|$|//|/\*)
     patterns:
      single:
       name: entity.name.type.swift
       pattern: (?x)\
(?<=\G|\.)\
(?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>)
       caps: 1=punctuation.definition.identifier.swift 2=punctuation.definition.identifier.swift
      single:
       name: entity.name.type.swift
       pattern: (?x)\
(?<=\G|\.)\
\$[0-9]+
      single:
       name: entity.name.type.swift
       pattern: (?x)\
(?<=\G|\.)\
(?:\
  (\
    (?<oph>                # operator-head\
      [/=\-+!*%<>&|^~?]\
      | [\x{00A1}-\x{00A7}]\
      | [\x{00A9}\x{00AB}]\
      | [\x{00AC}\x{00AE}]\
      | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]\
      | [\x{2016}-\x{2017}\x{2020}-\x{2027}]\
      | [\x{2030}-\x{203E}]\
      | [\x{2041}-\x{2053}]\
      | [\x{2055}-\x{205E}]\
      | [\x{2190}-\x{23FF}]\
      | [\x{2500}-\x{2775}]\
      | [\x{2794}-\x{2BFF}]\
      | [\x{2E00}-\x{2E7F}]\
      | [\x{3001}-\x{3003}]\
      | [\x{3008}-\x{3030}]\
    )*\
  )\
)\
(?=\.|;|$|//|/\*|\s)
      single:
       name: punctuation.separator.import.swift
       pattern: \.
      multi:
       name: invalid.illegal.character-not-allowed-here.swift
       begin: (?!\s*(;|$|//|/\*))
       end: (?=\s*(;|$|//|/\*))
 declarations-inheritance-clause:
  multi:
   name: meta.inheritance-clause.swift
   begin: (:)(?=\s*\{)|(:)\s*
   bcaps: 1=invalid.illegal.empty-inheritance-clause.swift 2=punctuation.separator.inheritance-clause.swift
   end: (?!\G)$|(?=[={}]|(?!\G)\bwhere\b)
   patterns:
    multi:
     begin: \bclass\b
     bcaps: 0=storage.type.class.swift
     end: (?=[={}]|(?!\G)\bwhere\b)
     patterns:
      include: #comments
      include: #declarations-inheritance-clause-more-types
    multi:
     begin: \G
     end: (?!\G)$|(?=[={}]|(?!\G)\bwhere\b)
     patterns:
      include: #comments
      include: #declarations-inheritance-clause-inherited-type
      include: #declarations-inheritance-clause-more-types
      include: #declarations-type-operators
 declarations-inheritance-clause-inherited-type:
  multi:
   name: entity.other.inherited-class.swift
   begin: (?=[`\p{L}_])
   end: (?!\G)
   patterns:
    include: #declarations-type-identifier
 declarations-inheritance-clause-more-types:
  multi:
   name: meta.inheritance-list.more-types
   begin: ,\s*
   end: (?!\G)(?!//|/\*)|(?=[,={}]|(?!\G)\bwhere\b)
   patterns:
    include: #comments
    include: #declarations-inheritance-clause-inherited-type
    include: #declarations-inheritance-clause-more-types
    include: #declarations-type-operators
 declarations-macro:
  multi:
   name: meta.definition.macro.swift
   begin: (?x)\
\b\
(macro)\
\s+\
((?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>))\
\s*\
(?=\(|<|=)
   bcaps: 1=storage.type.function.swift 2=entity.name.function.swift 3=punctuation.definition.identifier.swift 4=punctuation.definition.identifier.swift
   end: $|(?=;|//|/\*|\}|=)
   patterns:
    include: #comments
    include: #declarations-generic-parameter-clause
    include: #declarations-parameter-clause
    include: #declarations-function-result
    include: #async-throws
    include: #declarations-generic-where-clause
 declarations-operator:
  multi:
   name: meta.definition.operator.swift
   begin: (?x)\
(?:\
  \b(prefix|infix|postfix)\
  \s+\
)?\
\b\
(operator)\
\s+\
(\
  (\
    (?<oph>                  # operator-head\
      [/=\-+!*%<>&|^~?]\
      | [\x{00A1}-\x{00A7}]\
      | [\x{00A9}\x{00AB}]\
      | [\x{00AC}\x{00AE}]\
      | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]\
      | [\x{2016}-\x{2017}\x{2020}-\x{2027}]\
      | [\x{2030}-\x{203E}]\
      | [\x{2041}-\x{2053}]\
      | [\x{2055}-\x{205E}]\
      | [\x{2190}-\x{23FF}]\
      | [\x{2500}-\x{2775}]\
      | [\x{2794}-\x{2BFF}]\
      | [\x{2E00}-\x{2E7F}]\
      | [\x{3001}-\x{3003}]\
      | [\x{3008}-\x{3030}]\
    )*\
  )\
)\
\s*
   bcaps: 1=storage.modifier.swift 2=storage.type.function.operator.swift 3=entity.name.function.operator.swift 4=entity.name.function.operator.swift
   end: (;)|$\n?|(?=//|/\*)
   ecaps: 1=punctuation.terminator.statement.swift
   patterns:
    include: #declarations-operator-swift2
    include: #declarations-operator-swift3
    single:
     name: invalid.illegal.character-not-allowed-here.swift
     pattern: ((?!$|;|//|/\*)\S)+
 declarations-operator-swift2:
  multi:
   begin: \G(\{)
   bcaps: 1=punctuation.definition.operator.begin.swift
   end: (\})
   ecaps: 1=punctuation.definition.operator.end.swift
   patterns:
    include: #comments
    single:
     pattern: \b(associativity)\s+(left|right)\b
     caps: 1=storage.modifier.swift 2=keyword.other.operator.associativity.swift
    single:
     pattern: \b(precedence)\s+([0-9]+)\b
     caps: 1=storage.modifier.swift 2=constant.numeric.integer.swift
    single:
     pattern: \b(assignment)\b
     caps: 1=storage.modifier.swift
 declarations-operator-swift3:
  single:
   pattern: \G(:)\s*((?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>))
   caps: 2=entity.other.inherited-class.swift 3=punctuation.definition.identifier.swift 4=punctuation.definition.identifier.swift
 declarations-parameter-clause:
  multi:
   name: meta.parameter-clause.swift
   begin: (\()
   bcaps: 1=punctuation.definition.parameters.begin.swift
   end: (\))(?:\s*(async)\b)?
   ecaps: 1=punctuation.definition.parameters.end.swift 2=storage.modifier.async.swift
   patterns:
    include: #declarations-parameter-list
 declarations-parameter-list:
  single:
   pattern: ((?<q1>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q1>))\s+((?<q2>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q2>))(?=\s*:)
   caps: 1=entity.name.function.swift 2=punctuation.definition.identifier.swift 3=punctuation.definition.identifier.swift 4=variable.parameter.function.swift 5=punctuation.definition.identifier.swift 6=punctuation.definition.identifier.swift
  single:
   pattern: (((?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>)))(?=\s*:)
   caps: 1=variable.parameter.function.swift 2=entity.name.function.swift 3=punctuation.definition.identifier.swift 4=punctuation.definition.identifier.swift
  multi:
   begin: :\s*(?!\s)
   end: (?=[,)])
   patterns:
    include: #declarations-available-types
    single:
     name: invalid.illegal.extra-colon-in-parameter-list.swift
     pattern: :
    multi:
     begin: =
     bcaps: 0=keyword.operator.assignment.swift
     end: (?=[,)])
     patterns:
      include: #expressions
 declarations-precedencegroup:
  multi:
   name: meta.definition.precedencegroup.swift
   begin: \b(precedencegroup)\s+((?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>))\s*(?=\{)
   bcaps: 1=storage.type.precedencegroup.swift 2=entity.name.type.precedencegroup.swift 3=punctuation.definition.identifier.swift 4=punctuation.definition.identifier.swift
   end: (?!\G)
   patterns:
    multi:
     begin: \{
     bcaps: 0=punctuation.definition.precedencegroup.begin.swift
     end: \}
     ecaps: 0=punctuation.definition.precedencegroup.end.swift
     patterns:
      include: #comments
      single:
       pattern: \b(higherThan|lowerThan)\s*:\s*((?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>))
       caps: 1=storage.modifier.swift 2=entity.other.inherited-class.swift 3=punctuation.definition.identifier.swift 4=punctuation.definition.identifier.swift
      single:
       pattern: \b(associativity)\b(?:\s*:\s*(right|left|none)\b)?
       caps: 1=storage.modifier.swift 2=keyword.other.operator.associativity.swift
      single:
       pattern: \b(assignment)\b(?:\s*:\s*(true|false)\b)?
       caps: 1=storage.modifier.swift 2=constant.language.boolean.swift
 declarations-protocol:
  multi:
   name: meta.definition.type.protocol.swift
   begin: \b(protocol)\s+((?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>))
   bcaps: 1=storage.type.$1.swift 2=entity.name.type.$1.swift 3=punctuation.definition.identifier.swift 4=punctuation.definition.identifier.swift
   end: (?<=\})
   patterns:
    include: #comments
    include: #declarations-inheritance-clause
    include: #declarations-generic-where-clause
    multi:
     name: meta.definition.type.body.swift
     begin: \{
     bcaps: 0=punctuation.definition.type.begin.swift
     end: \}
     ecaps: 0=punctuation.definition.type.end.swift
     patterns:
      include: #declarations-protocol-protocol-method
      include: #declarations-protocol-protocol-initializer
      include: #declarations-protocol-associated-type
      include: $self
 declarations-protocol-associated-type:
  multi:
   name: meta.definition.associatedtype.swift
   begin: \b(associatedtype)\s+((?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>))\s*
   bcaps: 1=keyword.other.declaration-specifier.swift 2=variable.language.associatedtype.swift 3=punctuation.definition.identifier.swift 4=punctuation.definition.identifier.swift
   end: (?!\G)$|(?=[;}]|$)
   patterns:
    include: #declarations-inheritance-clause
    include: #declarations-generic-where-clause
    include: #declarations-typealias-assignment
 declarations-protocol-protocol-initializer:
  multi:
   name: meta.definition.function.initializer.swift
   begin: (?<!\.)\b(init[?!]*)\s*(?=\(|<)
   bcaps: 1=storage.type.function.swift
   end: $|(?=;|//|/\*|\})
   patterns:
    include: #comments
    include: #declarations-generic-parameter-clause
    include: #declarations-parameter-clause
    include: #async-throws
    include: #declarations-generic-where-clause
    multi:
     name: invalid.illegal.function-body-not-allowed-in-protocol.swift
     begin: \{
     bcaps: 0=punctuation.section.function.begin.swift
     end: \}
     ecaps: 0=punctuation.section.function.end.swift
     patterns:
      include: $self
 declarations-protocol-protocol-method:
  multi:
   name: meta.definition.function.swift
   begin: (?x)\
\b\
(func)\
\s+\
(\
  (?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>)\
  )\
\s*\
(?=\(|<)
   bcaps: 1=storage.type.function.swift 2=entity.name.function.swift 3=punctuation.definition.identifier.swift 4=punctuation.definition.identifier.swift
   end: $|(?=;|//|/\*|\})
   patterns:
    include: #comments
    include: #declarations-generic-parameter-clause
    include: #declarations-parameter-clause
    include: #declarations-function-result
    include: #async-throws
    include: #declarations-generic-where-clause
    multi:
     name: invalid.illegal.function-body-not-allowed-in-protocol.swift
     begin: \{
     bcaps: 0=punctuation.section.function.begin.swift
     end: \}
     ecaps: 0=punctuation.section.function.end.swift
     patterns:
      include: $self
 declarations-type:
  multi:
   name: meta.definition.type.$1.swift
   begin: \b(class(?!\s+(?:func|var|let)\b)|struct|actor)\b\s*((?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>))
   bcaps: 1=storage.type.$1.swift 2=entity.name.type.$1.swift 3=punctuation.definition.identifier.swift 4=punctuation.definition.identifier.swift
   end: (?<=\})
   patterns:
    include: #comments
    include: #declarations-generic-parameter-clause
    include: #declarations-generic-where-clause
    include: #declarations-inheritance-clause
    multi:
     name: meta.definition.type.body.swift
     begin: \{
     bcaps: 0=punctuation.definition.type.begin.swift
     end: \}
     ecaps: 0=punctuation.definition.type.end.swift
     patterns:
      include: $self
  include: #declarations-type-enum
 declarations-type-enum:
  multi:
   name: meta.definition.type.$1.swift
   begin: \b(enum)\s+((?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>))
   bcaps: 1=storage.type.$1.swift 2=entity.name.type.$1.swift 3=punctuation.definition.identifier.swift 4=punctuation.definition.identifier.swift
   end: (?<=\})
   patterns:
    include: #comments
    include: #declarations-generic-parameter-clause
    include: #declarations-generic-where-clause
    include: #declarations-inheritance-clause
    multi:
     name: meta.definition.type.body.swift
     begin: \{
     bcaps: 0=punctuation.definition.type.begin.swift
     end: \}
     ecaps: 0=punctuation.definition.type.end.swift
     patterns:
      include: #declarations-type-enum-enum-case-clause
      include: $self
 declarations-type-enum-associated-values:
  multi:
   begin: \G\(
   bcaps: 0=punctuation.definition.parameters.begin.swift
   end: \)
   ecaps: 0=punctuation.definition.parameters.end.swift
   patterns:
    include: #comments
    multi:
     begin: (?x)\
(?:(_)|((?<q1>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*\k<q1>))\
\s+\
(((?<q2>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*\k<q2>))\
\s*(:)
     bcaps: 1=entity.name.function.swift 2=invalid.illegal.distinct-labels-not-allowed.swift 5=variable.parameter.function.swift 7=punctuation.separator.argument-label.swift
     end: (?=[,)\]])
     patterns:
      include: #declarations-available-types
    multi:
     begin: (((?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*\k<q>))\s*(:)
     bcaps: 1=entity.name.function.swift 2=variable.parameter.function.swift 4=punctuation.separator.argument-label.swift
     end: (?=[,)\]])
     patterns:
      include: #declarations-available-types
    multi:
     begin: (?![,)\]])(?=\S)
     end: (?=[,)\]])
     patterns:
      include: #declarations-available-types
      single:
       name: invalid.illegal.extra-colon-in-parameter-list.swift
       pattern: :
 declarations-type-enum-enum-case:
  multi:
   begin: (?x)((?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>))\s*
   bcaps: 1=variable.other.enummember.swift
   end: (?<=\))|(?![=(])
   patterns:
    include: #comments
    include: #declarations-type-enum-associated-values
    include: #declarations-type-enum-raw-value-assignment
 declarations-type-enum-enum-case-clause:
  multi:
   begin: \b(case)\b\s*
   bcaps: 1=storage.type.enum.case.swift
   end: (?=[;}])|(?!\G)(?!//|/\*)(?=[^\s,])
   patterns:
    include: #comments
    include: #declarations-type-enum-enum-case
    include: #declarations-type-enum-more-cases
 declarations-type-enum-more-cases:
  multi:
   name: meta.enum-case.more-cases
   begin: ,\s*
   end: (?!\G)(?!//|/\*)(?=[;}]|[^\s,])
   patterns:
    include: #comments
    include: #declarations-type-enum-enum-case
    include: #declarations-type-enum-more-cases
 declarations-type-enum-raw-value-assignment:
  multi:
   begin: (=)\s*
   bcaps: 1=keyword.operator.assignment.swift
   end: (?!\G)
   patterns:
    include: #comments
    include: #literals
 declarations-type-identifier:
  multi:
   begin: ((?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>))\s*
   bcaps: 1=meta.type-name.swift 2=punctuation.definition.identifier.swift 3=punctuation.definition.identifier.swift
   end: (?!<)
   patterns:
    multi:
     begin: (?=<)
     end: (?!\G)
     patterns:
      include: #declarations-generic-argument-clause
 declarations-type-operators:
  single:
   pattern: (?<![/=\-+!*%<>&|\^~.])(&)(?![/=\-+!*%<>&|\^~.])
   caps: 1=keyword.operator.type.composition.swift
  single:
   pattern: (?<![/=\-+!*%<>&|\^~.])(~)(?![/=\-+!*%<>&|\^~.])
   caps: 1=keyword.operator.type.requirement-suppression.swift
 declarations-typealias:
  multi:
   name: meta.definition.typealias.swift
   begin: \b(typealias)\s+((?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>))\s*
   bcaps: 1=keyword.other.declaration-specifier.swift 2=entity.name.type.typealias.swift 3=punctuation.definition.identifier.swift 4=punctuation.definition.identifier.swift
   end: (?!\G)$|(?=;|//|/\*|$)
   patterns:
    multi:
     begin: \G(?=<)
     end: (?!\G)
     patterns:
      include: #declarations-generic-parameter-clause
    include: #declarations-typealias-assignment
 declarations-typealias-assignment:
  multi:
   begin: (=)\s*
   bcaps: 1=keyword.operator.assignment.swift
   end: (?!\G)$|(?=;|//|/\*|$)
   patterns:
    include: #declarations-available-types
 declarations-typed-variable-declaration:
  multi:
   begin: (?x)\
\b(?:(async)\s+)?(let|var)\b\s+\
(?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>)\s*\
:
   bcaps: 1=storage.modifier.async.swift 2=keyword.other.declaration-specifier.swift
   end: (?=$|[={])
   patterns:
    include: #declarations-available-types
 declarations-types-precedencegroup:
  single:
   name: support.type.swift
   pattern: \b(?:BitwiseShift|Assignment|RangeFormation|Casting|Addition|NilCoalescing|Comparison|LogicalConjunction|LogicalDisjunction|Default|Ternary|Multiplication|FunctionArrow)Precedence\b
 expressions:
  include: #expressions-without-trailing-closures-or-member-references
  include: #expressions-trailing-closure
  include: #member-reference
 expressions-trailing-closure:
  single:
   name: meta.function-call.trailing-closure-only.swift
   pattern: (#?(?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>))(?=\s*\{)
   caps: 1=support.function.any-method.swift 2=punctuation.definition.identifier.swift 3=punctuation.definition.identifier.swift
  single:
   pattern: ((?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>))\s*(:)(?=\s*\{)
   caps: 1=support.function.any-method.trailing-closure-label.swift 2=punctuation.definition.identifier.swift 3=punctuation.definition.identifier.swift 4=punctuation.separator.argument-label.swift
 expressions-without-trailing-closures:
  include: #expressions-without-trailing-closures-or-member-references
  include: #member-references
 expressions-without-trailing-closures-or-member-references:
  include: #comments
  include: #code-block
  include: #attributes
  include: #expressions-without-trailing-closures-or-member-references-closure-parameter
  include: #literals
  include: #operators
  include: #builtin-types
  include: #builtin-functions
  include: #builtin-global-functions
  include: #builtin-properties
  include: #expressions-without-trailing-closures-or-member-references-compound-name
  include: #conditionals
  include: #keywords
  include: #expressions-without-trailing-closures-or-member-references-availability-condition
  include: #expressions-without-trailing-closures-or-member-references-function-or-macro-call-expression
  include: #expressions-without-trailing-closures-or-member-references-macro-expansion
  include: #expressions-without-trailing-closures-or-member-references-subscript-expression
  include: #expressions-without-trailing-closures-or-member-references-parenthesized-expression
  single:
   name: support.variable.discard-value.swift
   pattern: \b_\b
 expressions-without-trailing-closures-or-member-references-availability-condition:
  multi:
   begin: \B(#(?:un)?available)(\()
   bcaps: 1=support.function.availability-condition.swift 2=punctuation.definition.arguments.begin.swift
   end: \)
   ecaps: 0=punctuation.definition.arguments.end.swift
   patterns:
    single:
     pattern: \s*\b((?:iOS|macOS|OSX|watchOS|tvOS|UIKitForMac)(?:ApplicationExtension)?)\b(?:\s+([0-9]+(?:\.[0-9]+)*\b))
     caps: 1=keyword.other.platform.os.swift 2=constant.numeric.swift
    single:
     pattern: (\*)\s*(.*?)(?=[,)])
     caps: 1=keyword.other.platform.all.swift 2=invalid.illegal.character-not-allowed-here.swift
    single:
     name: invalid.illegal.character-not-allowed-here.swift
     pattern: [^\s,)]+
 expressions-without-trailing-closures-or-member-references-closure-parameter:
  single:
   name: variable.language.closure-parameter.swift
   pattern: \$[0-9]+
 expressions-without-trailing-closures-or-member-references-compound-name:
  single:
   pattern: (?x)\
((?<q1>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q1>))           # function name\
\(\
  (\
    (\
      ((?<q2>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q2>))   # argument label\
      :                        # colon\
    )+\
  )\
\)
   caps: 1=entity.name.function.compound-name.swift 2=punctuation.definition.entity.swift 3=punctuation.definition.entity.swift
 expressions-without-trailing-closures-or-member-references-expression-element-list:
  include: #comments
  multi:
   begin: ((?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>))\s*(:)
   bcaps: 1=support.function.any-method.swift 2=punctuation.definition.identifier.swift 3=punctuation.definition.identifier.swift 4=punctuation.separator.argument-label.swift
   end: (?=[,)\]])
   patterns:
    include: #expressions
  multi:
   begin: (?![,)\]])(?=\S)
   end: (?=[,)\]])
   patterns:
    include: #expressions
 expressions-without-trailing-closures-or-member-references-function-or-macro-call-expression:
  multi:
   name: meta.function-call.swift
   begin: (#?(?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>))\s*(\()
   bcaps: 1=support.function.any-method.swift 2=punctuation.definition.identifier.swift 3=punctuation.definition.identifier.swift 4=punctuation.definition.arguments.begin.swift
   end: \)
   ecaps: 0=punctuation.definition.arguments.end.swift
   patterns:
    include: #expressions-without-trailing-closures-or-member-references-expression-element-list
  multi:
   name: meta.function-call.swift
   begin: (?<=[`\])}>\p{L}_\p{N}\p{M}])\s*(\()
   bcaps: 1=punctuation.definition.arguments.begin.swift
   end: \)
   ecaps: 0=punctuation.definition.arguments.end.swift
   patterns:
    include: #expressions-without-trailing-closures-or-member-references-expression-element-list
 expressions-without-trailing-closures-or-member-references-macro-expansion:
  single:
   name: support.function.any-method.swift
   pattern: (#(?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>))
 expressions-without-trailing-closures-or-member-references-parenthesized-expression:
  multi:
   begin: \(
   bcaps: 0=punctuation.section.tuple.begin.swift
   end: (\))\s*((?:\b(?:async|throws|rethrows)\s)*)
   ecaps: 1=punctuation.section.tuple.end.swift
   patterns:
    include: #expressions-without-trailing-closures-or-member-references-expression-element-list
 expressions-without-trailing-closures-or-member-references-subscript-expression:
  multi:
   name: meta.subscript-expression.swift
   begin: (?<=[`\p{L}_\p{N}\p{M}])\s*(\[)
   bcaps: 1=punctuation.definition.arguments.begin.swift
   end: \]
   ecaps: 0=punctuation.definition.arguments.end.swift
   patterns:
    include: #expressions-without-trailing-closures-or-member-references-expression-element-list
 keywords:
  single:
   name: keyword.control.branch.swift
   pattern: (?<!\.)\b(?:if|else|guard|where|switch|case|default|fallthrough)\b
  single:
   name: keyword.control.transfer.swift
   pattern: (?<!\.)\b(?:continue|break|fallthrough|return)\b
  single:
   name: keyword.control.loop.swift
   pattern: (?<!\.)\b(?:while|for|in|each)\b
  single:
   name: keyword.other.operator.type.existential.swift
   pattern: \bany\b(?=\s*`?[\p{L}_])
  single:
   pattern: (?<!\.)\b(repeat)\b(\s*)
   caps: 1=keyword.control.loop.swift 2=punctuation.whitespace.trailing.repeat.swift
  single:
   name: keyword.control.defer.swift
   pattern: (?<!\.)\bdefer\b
  single:
   pattern: (?<!\.)\b(?:(await\s+try)|(await)\b)
   caps: 1=invalid.illegal.try-must-precede-await.swift 2=keyword.control.await.swift
  single:
   name: keyword.control.exception.swift
   pattern: (?<!\.)\b(?:catch|throw|try)\b|\btry[?!]\B
  single:
   name: storage.modifier.exception.swift
   pattern: (?<!\.)\b(?:throws|rethrows)\b
  single:
   pattern: (?<!\.)\b(do)\b(\s*)
   caps: 1=keyword.control.exception.swift 2=punctuation.whitespace.trailing.do.swift
  single:
   pattern: (?<!\.)\b(?:(async)\s+)?(let|var)\b
   caps: 1=storage.modifier.async.swift 2=keyword.other.declaration-specifier.swift
  single:
   name: keyword.other.declaration-specifier.swift
   pattern: (?<!\.)\b(?:associatedtype|operator|typealias)\b
  single:
   name: storage.type.$1.swift
   pattern: (?<!\.)\b(class|enum|extension|precedencegroup|protocol|struct|actor)\b(?=\s*`?[\p{L}_])
  single:
   name: storage.modifier.swift
   pattern: (?<!\.)\b(?:inout|static|final|lazy|mutating|nonmutating|optional|indirect|required|override|dynamic|convenience|infix|prefix|postfix|distributed|nonisolated|borrowing|consuming)\b
  single:
   name: storage.type.function.swift
   pattern: \binit[?!]|\binit\b|(?<!\.)\b(?:func|deinit|subscript|didSet|get|set|willSet)\b
  single:
   name: keyword.other.declaration-specifier.accessibility.swift
   pattern: (?<!\.)\b(?:fileprivate|private|internal|public|open|package)\b
  single:
   name: keyword.other.capture-specifier.swift
   pattern: (?<!\.)\bunowned\((?:safe|unsafe)\)|(?<!\.)\b(?:weak|unowned)\b
  single:
   pattern: (?<=\.)(?:(dynamicType|self)|(Protocol|Type))\b
   caps: 1=keyword.other.type.swift 2=keyword.other.type.metatype.swift
  single:
   name: variable.language.swift
   pattern: (?<!\.)\b(?:super|self|Self)\b
  single:
   name: support.variable.swift
   pattern: \B(?:#file|#filePath|#fileID|#line|#column|#function|#dsohandle)\b|\b(?:__FILE__|__LINE__|__COLUMN__|__FUNCTION__|__DSO_HANDLE__)\b
  single:
   name: keyword.control.import.swift
   pattern: (?<!\.)\bimport\b
  single:
   name: keyword.control.consume.swift
   pattern: (?<!\.)\bconsume(?=\s+`?[\p{L}_])
  single:
   name: keyword.control.copy.swift
   pattern: (?<!\.)\bcopy(?=\s+`?[\p{L}_])
 literals:
  include: #literals-boolean
  include: #literals-numeric
  include: #literals-string
  single:
   name: constant.language.nil.swift
   pattern: \bnil\b
  single:
   name: support.function.object-literal.swift
   pattern: \B#(colorLiteral|imageLiteral|fileLiteral)\b
  single:
   name: support.function.builtin-macro.swift
   pattern: \B#externalMacro\b
  single:
   name: support.function.key-path.swift
   pattern: \B#keyPath\b
  multi:
   begin: \B(#selector)(\()(?:\s*(getter|setter)\s*(:))?
   bcaps: 1=support.function.selector-reference.swift 2=punctuation.definition.arguments.begin.swift 3=support.variable.parameter.swift 4=punctuation.separator.argument-label.swift
   end: \)
   ecaps: 0=punctuation.definition.arguments.end.swift
   patterns:
    include: #expressions
 literals-boolean:
  single:
   name: constant.language.boolean.swift
   pattern: \b(true|false)\b
 literals-numeric:
  single:
   name: constant.numeric.float.decimal.swift
   pattern: (\B\-|\b)(?<![\[\](){}\p{L}_\p{N}\p{M}]\.)[0-9][0-9_]*(?=\.[0-9]|[eE])(?:\.[0-9][0-9_]*)?(?:[eE][-+]?[0-9][0-9_]*)?\b(?!\.[0-9])
  single:
   name: constant.numeric.float.hexadecimal.swift
   pattern: (\B\-|\b)(?<![\[\](){}\p{L}_\p{N}\p{M}]\.)(0x[0-9a-fA-F][0-9a-fA-F_]*)(?:\.[0-9a-fA-F][0-9a-fA-F_]*)?[pP][-+]?[0-9][0-9_]*\b(?!\.[0-9])
  single:
   name: invalid.illegal.numeric.float.invalid-exponent.swift
   pattern: (\B\-|\b)(?<![\[\](){}\p{L}_\p{N}\p{M}]\.)(0x[0-9a-fA-F][0-9a-fA-F_]*)(?:\.[0-9a-fA-F][0-9a-fA-F_]*)?(?:[pP][-+]?\w*)\b(?!\.[0-9])
  single:
   name: invalid.illegal.numeric.float.missing-exponent.swift
   pattern: (\B\-|\b)(?<![\[\](){}\p{L}_\p{N}\p{M}]\.)(0x[0-9a-fA-F][0-9a-fA-F_]*)\.[0-9][\w.]*
  single:
   name: invalid.illegal.numeric.float.missing-leading-zero.swift
   pattern: (?<=\s|^)\-?\.[0-9][\w.]*
  single:
   name: invalid.illegal.numeric.leading-underscore.swift
   pattern: (\B\-|\b)0[box]_[0-9a-fA-F_]*(?:[pPeE][+-]?\w+)?[\w.]+
  single:
   pattern: (?<=[\[\](){}\p{L}_\p{N}\p{M}]\.)[0-9]+\b
  single:
   name: constant.numeric.integer.binary.swift
   pattern: (\B\-|\b)(?<![\[\](){}\p{L}_\p{N}\p{M}]\.)0b[01][01_]*\b(?!\.[0-9])
  single:
   name: constant.numeric.integer.octal.swift
   pattern: (\B\-|\b)(?<![\[\](){}\p{L}_\p{N}\p{M}]\.)0o[0-7][0-7_]*\b(?!\.[0-9])
  single:
   name: constant.numeric.integer.decimal.swift
   pattern: (\B\-|\b)(?<![\[\](){}\p{L}_\p{N}\p{M}]\.)[0-9][0-9_]*\b(?!\.[0-9])
  single:
   name: constant.numeric.integer.hexadecimal.swift
   pattern: (\B\-|\b)(?<![\[\](){}\p{L}_\p{N}\p{M}]\.)0x[0-9a-fA-F][0-9a-fA-F_]*\b(?!\.[0-9])
  single:
   name: invalid.illegal.numeric.other.swift
   pattern: (\B\-|\b)[0-9][\w.]*
 literals-string:
  multi:
   name: string.quoted.double.block.swift
   begin: """
   bcaps: 0=punctuation.definition.string.begin.swift
   end: """(#*)
   ecaps: 0=punctuation.definition.string.end.swift 1=invalid.illegal.extra-closing-delimiter.swift
   patterns:
    single:
     name: invalid.illegal.content-after-opening-delimiter.swift
     pattern: \G.+(?=""")|\G.+
    single:
     name: constant.character.escape.newline.swift
     pattern: \\\s*\n
    include: #literals-string-string-guts
    single:
     name: invalid.illegal.content-before-closing-delimiter.swift
     pattern: \S((?!\\\().)*(?=""")
  multi:
   name: string.quoted.double.block.raw.swift
   begin: #"""
   bcaps: 0=punctuation.definition.string.begin.swift
   end: """#(#*)
   ecaps: 0=punctuation.definition.string.end.swift 1=invalid.illegal.extra-closing-delimiter.swift
   patterns:
    single:
     name: invalid.illegal.content-after-opening-delimiter.swift
     pattern: \G.+(?=""")|\G.+
    single:
     name: constant.character.escape.newline.swift
     pattern: \\#\s*\n
    include: #literals-string-raw-string-guts
    single:
     name: invalid.illegal.content-before-closing-delimiter.swift
     pattern: \S((?!\\#\().)*(?=""")
  multi:
   name: string.quoted.double.block.raw.swift
   begin: (##+)"""
   bcaps: 0=punctuation.definition.string.begin.swift
   end: """\1(#*)
   ecaps: 0=punctuation.definition.string.end.swift 1=invalid.illegal.extra-closing-delimiter.swift
   patterns:
    single:
     name: invalid.illegal.content-after-opening-delimiter.swift
     pattern: \G.+(?=""")|\G.+
  multi:
   name: string.quoted.double.single-line.swift
   begin: "
   bcaps: 0=punctuation.definition.string.begin.swift
   end: "(#*)
   ecaps: 0=punctuation.definition.string.end.swift 1=invalid.illegal.extra-closing-delimiter.swift
   patterns:
    single:
     name: invalid.illegal.returns-not-allowed.swift
     pattern: \r|\n
    include: #literals-string-string-guts
  multi:
   name: string.quoted.double.single-line.raw.swift
   begin: (##+)"
   bcaps: 0=punctuation.definition.string.begin.raw.swift
   end: "\1(#*)
   ecaps: 0=punctuation.definition.string.end.raw.swift 1=invalid.illegal.extra-closing-delimiter.swift
   patterns:
    single:
     name: invalid.illegal.returns-not-allowed.swift
     pattern: \r|\n
  multi:
   name: string.quoted.double.single-line.raw.swift
   begin: #"
   bcaps: 0=punctuation.definition.string.begin.raw.swift
   end: "#(#*)
   ecaps: 0=punctuation.definition.string.end.raw.swift 1=invalid.illegal.extra-closing-delimiter.swift
   patterns:
    single:
     name: invalid.illegal.returns-not-allowed.swift
     pattern: \r|\n
    include: #literals-string-raw-string-guts
 literals-string-raw-string-guts:
  single:
   name: constant.character.escape.swift
   pattern: \\#[0\\tnr"']
  single:
   name: constant.character.escape.unicode.swift
   pattern: \\#u\{[0-9a-fA-F]{1,8}\}
  multi:
   name: meta.embedded.line.swift
   contentName: source.swift
   begin: \\#\(
   bcaps: 0=punctuation.section.embedded.begin.swift
   end: (\))
   ecaps: 0=punctuation.section.embedded.end.swift 1=source.swift
   patterns:
    include: $self
    multi:
     begin: \(
     end: \)
  single:
   name: invalid.illegal.escape-not-recognized
   pattern: \\#.
 literals-string-string-guts:
  single:
   name: constant.character.escape.swift
   pattern: \\[0\\tnr"']
  single:
   name: constant.character.escape.unicode.swift
   pattern: \\u\{[0-9a-fA-F]{1,8}\}
  multi:
   name: meta.embedded.line.swift
   contentName: source.swift
   begin: \\\(
   bcaps: 0=punctuation.section.embedded.begin.swift
   end: (\))
   ecaps: 0=punctuation.section.embedded.end.swift 1=source.swift
   patterns:
    include: $self
    multi:
     begin: \(
     end: \)
  single:
   name: invalid.illegal.escape-not-recognized
   pattern: \\.
 member-reference:
  single:
   pattern: (?<=\.)((?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>))
   caps: 1=variable.other.swift 2=punctuation.definition.identifier.swift 3=punctuation.definition.identifier.swift
 operators:
  single:
   name: keyword.operator.type-casting.swift
   pattern: \b(is\b|as([!?]\B|\b))
  multi:
   begin: (?x)\
(?=\
  (?<oph>                # operator-head\
    [/=\-+!*%<>&|^~?]\
    | [\x{00A1}-\x{00A7}]\
    | [\x{00A9}\x{00AB}]\
    | [\x{00AC}\x{00AE}]\
    | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]\
    | [\x{2016}-\x{2017}\x{2020}-\x{2027}]\
    | [\x{2030}-\x{203E}]\
    | [\x{2041}-\x{2053}]\
    | [\x{2055}-\x{205E}]\
    | [\x{2190}-\x{23FF}]\
    | [\x{2500}-\x{2775}]\
    | [\x{2794}-\x{2BFF}]\
    | [\x{2E00}-\x{2E7F}]\
    | [\x{3001}-\x{3003}]\
    | [\x{3008}-\x{3030}]\
  )\
  | \.\
)
   end: (?!\G)
   patterns:
    single:
     pattern: (?x)\
\G                    # Matching from the beginning ensures\
                    # that we start with operator-head\
(?<=^|[\s(\[{,;:])\
(\
  (?!(//|/\*|\*/))\
  (\
    [/=\-+!*%<>&|^~?]        # operator-head\
    | [\x{00A1}-\x{00A7}]\
    | [\x{00A9}\x{00AB}]\
    | [\x{00AC}\x{00AE}]\
    | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]\
    | [\x{2016}-\x{2017}\x{2020}-\x{2027}]\
    | [\x{2030}-\x{203E}]\
    | [\x{2041}-\x{2053}]\
    | [\x{2055}-\x{205E}]\
    | [\x{2190}-\x{23FF}]\
    | [\x{2500}-\x{2775}]\
    | [\x{2794}-\x{2BFF}]\
    | [\x{2E00}-\x{2E7F}]\
    | [\x{3001}-\x{3003}]\
    | [\x{3008}-\x{3030}]\
  \
    | [\x{0300}-\x{036F}]        # operator-character\
    | [\x{1DC0}-\x{1DFF}]\
    | [\x{20D0}-\x{20FF}]\
    | [\x{FE00}-\x{FE0F}]\
    | [\x{FE20}-\x{FE2F}]\
    | [\x{E0100}-\x{E01EF}]\
  )\
)++\
(?![\s)\]},;:]|\z)
    single:
     pattern: (?x)\
\G                    # Matching from the beginning ensures\
                    # that we start with operator-head\
(?<!^|[\s(\[{,;:])\
(\
  (?!(//|/\*|\*/))\
  (\
    [/=\-+!*%<>&|^~?]        # operator-head\
    | [\x{00A1}-\x{00A7}]\
    | [\x{00A9}\x{00AB}]\
    | [\x{00AC}\x{00AE}]\
    | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]\
    | [\x{2016}-\x{2017}\x{2020}-\x{2027}]\
    | [\x{2030}-\x{203E}]\
    | [\x{2041}-\x{2053}]\
    | [\x{2055}-\x{205E}]\
    | [\x{2190}-\x{23FF}]\
    | [\x{2500}-\x{2775}]\
    | [\x{2794}-\x{2BFF}]\
    | [\x{2E00}-\x{2E7F}]\
    | [\x{3001}-\x{3003}]\
    | [\x{3008}-\x{3030}]\
  \
    | [\x{0300}-\x{036F}]        # operator-character\
    | [\x{1DC0}-\x{1DFF}]\
    | [\x{20D0}-\x{20FF}]\
    | [\x{FE00}-\x{FE0F}]\
    | [\x{FE20}-\x{FE2F}]\
    | [\x{E0100}-\x{E01EF}]\
  )\
)++\
(?=[\s)\]},;:]|\z)
    single:
     pattern: (?x)\
\G                    # Matching from the beginning ensures\
                    # that we start with operator-head\
(\
  (?!(//|/\*|\*/))\
  (\
    [/=\-+!*%<>&|^~?]        # operator-head\
    | [\x{00A1}-\x{00A7}]\
    | [\x{00A9}\x{00AB}]\
    | [\x{00AC}\x{00AE}]\
    | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]\
    | [\x{2016}-\x{2017}\x{2020}-\x{2027}]\
    | [\x{2030}-\x{203E}]\
    | [\x{2041}-\x{2053}]\
    | [\x{2055}-\x{205E}]\
    | [\x{2190}-\x{23FF}]\
    | [\x{2500}-\x{2775}]\
    | [\x{2794}-\x{2BFF}]\
    | [\x{2E00}-\x{2E7F}]\
    | [\x{3001}-\x{3003}]\
    | [\x{3008}-\x{3030}]\
  \
    | [\x{0300}-\x{036F}]        # operator-character\
    | [\x{1DC0}-\x{1DFF}]\
    | [\x{20D0}-\x{20FF}]\
    | [\x{FE00}-\x{FE0F}]\
    | [\x{FE20}-\x{FE2F}]\
    | [\x{E0100}-\x{E01EF}]\
  )\
)++
    single:
     pattern: (?x)\
\G                    # Matching from the beginning ensures\
                    # that we start with operator-head\
(?<=^|[\s(\[{,;:])\
\.                    # dot\
(\
  (?!(//|/\*|\*/))\
  (\
    \.                # dot\
    | [/=\-+!*%<>&|^~?]        # operator-head\
    | [\x{00A1}-\x{00A7}]\
    | [\x{00A9}\x{00AB}]\
    | [\x{00AC}\x{00AE}]\
    | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]\
    | [\x{2016}-\x{2017}\x{2020}-\x{2027}]\
    | [\x{2030}-\x{203E}]\
    | [\x{2041}-\x{2053}]\
    | [\x{2055}-\x{205E}]\
    | [\x{2190}-\x{23FF}]\
    | [\x{2500}-\x{2775}]\
    | [\x{2794}-\x{2BFF}]\
    | [\x{2E00}-\x{2E7F}]\
    | [\x{3001}-\x{3003}]\
    | [\x{3008}-\x{3030}]\
  \
    | [\x{0300}-\x{036F}]        # operator-character\
    | [\x{1DC0}-\x{1DFF}]\
    | [\x{20D0}-\x{20FF}]\
    | [\x{FE00}-\x{FE0F}]\
    | [\x{FE20}-\x{FE2F}]\
    | [\x{E0100}-\x{E01EF}]\
  )\
)++\
(?![\s)\]},;:]|\z)
    single:
     pattern: (?x)\
\G                    # Matching from the beginning ensures\
                    # that we start with operator-head\
(?<!^|[\s(\[{,;:])\
\.                    # dot\
(\
  (?!(//|/\*|\*/))\
  (\
    \.                # dot\
    | [/=\-+!*%<>&|^~?]        # operator-head\
    | [\x{00A1}-\x{00A7}]\
    | [\x{00A9}\x{00AB}]\
    | [\x{00AC}\x{00AE}]\
    | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]\
    | [\x{2016}-\x{2017}\x{2020}-\x{2027}]\
    | [\x{2030}-\x{203E}]\
    | [\x{2041}-\x{2053}]\
    | [\x{2055}-\x{205E}]\
    | [\x{2190}-\x{23FF}]\
    | [\x{2500}-\x{2775}]\
    | [\x{2794}-\x{2BFF}]\
    | [\x{2E00}-\x{2E7F}]\
    | [\x{3001}-\x{3003}]\
    | [\x{3008}-\x{3030}]\
  \
    | [\x{0300}-\x{036F}]        # operator-character\
    | [\x{1DC0}-\x{1DFF}]\
    | [\x{20D0}-\x{20FF}]\
    | [\x{FE00}-\x{FE0F}]\
    | [\x{FE20}-\x{FE2F}]\
    | [\x{E0100}-\x{E01EF}]\
  )\
)++\
(?=[\s)\]},;:]|\z)
    single:
     pattern: (?x)\
\G                    # Matching from the beginning ensures\
                    # that we start with operator-head\
\.                    # dot\
(\
  (?!(//|/\*|\*/))\
  (\
    \.                # dot\
    | [/=\-+!*%<>&|^~?]        # operator-head\
    | [\x{00A1}-\x{00A7}]\
    | [\x{00A9}\x{00AB}]\
    | [\x{00AC}\x{00AE}]\
    | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]\
    | [\x{2016}-\x{2017}\x{2020}-\x{2027}]\
    | [\x{2030}-\x{203E}]\
    | [\x{2041}-\x{2053}]\
    | [\x{2055}-\x{205E}]\
    | [\x{2190}-\x{23FF}]\
    | [\x{2500}-\x{2775}]\
    | [\x{2794}-\x{2BFF}]\
    | [\x{2E00}-\x{2E7F}]\
    | [\x{3001}-\x{3003}]\
    | [\x{3008}-\x{3030}]\
  \
    | [\x{0300}-\x{036F}]        # operator-character\
    | [\x{1DC0}-\x{1DFF}]\
    | [\x{20D0}-\x{20FF}]\
    | [\x{FE00}-\x{FE0F}]\
    | [\x{FE20}-\x{FE2F}]\
    | [\x{E0100}-\x{E01EF}]\
  )\
)++
  single:
   name: keyword.operator.ternary.swift
   pattern: :
 root:
  include: #compiler-control
  include: #declarations
  include: #expressions
patterns:
 include: #root
